var OAuth = require('oauth');
var express = require('express');
var router = express.Router();
var config = require('../../config');
var response = require('../factories/standard-response');
var q = require('q');
/**
 * OAuth Clients, generated by oauth library
* */
var clients = {
  twitter: new OAuth.OAuth(
    'https://api.twitter.com/oauth/request_token',
    'https://api.twitter.com/oauth/access_token',
    config.twitter.consumerKey,
    config.twitter.consumerSecret,
    '1.0A',
    config.envVariables[config.appEnv].applicationUri + '/oauth1/callback',
    'HMAC-SHA1'
  )
};
module.exports.clients = clients;
/**
 * Generate initial request to oAuth1 provider, redirect to authorize page once oauth_token is passed back
 * */
router.get('/request', function (req, res) {
  var provider = req.query.provider;
  clients[provider].getOAuthRequestToken(function(error, oauth_token, oauth_token_secret) {
    if (!error && oauth_token && oauth_token_secret) {
      //save secret and provider to server session, needed to validate where the request came from after twitter redirects to callback route
      req.session.oauth_token_secret = oauth_token_secret;
      req.session.provider = provider;
      //redirect the user
      return res.redirect('https://twitter.com/oauth/authorize?oauth_token=' + oauth_token);
    }
    response.error(res, {
      internalMessage: 'request token did not successfully return',
      data: {error: error}
    });
  });
});
/**
 * Route twitter returns auth tokens to after user authenticates application
 * */
router.get('/callback', function(req, res) {
  //if session storage items don't exist, throw an error
  if (!req.session.provider || !req.session.oauth_token_secret)
    return response.error(res, {
      internalMessage: 'Session data not valuable for oAuth1 callback'
    });
  clients[req.session.provider].getOAuthAccessToken(
    req.query.oauth_token,
    req.session.oauth_token_secret,
    req.query.oauth_verifier,
    function(error, access_token, access_token_secret){
      response.returnAuthToken(res, access_token, access_token_secret);
  });
});

module.exports.router = router;
